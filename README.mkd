# Predi-Veli

## About 

A project to predict the number of available vélibs.

Basic goal: predict the number of vélibs,
* in a specific station,
* between 9:00 and 9:30

## Possible improvement and extensions

### Inside the model

* include interactions between stations (*i.e.* if one is full, the closest ones are going to be filled more quickly).

### Technical improvements

* send data automatically to a predefined server.

# Current implementation

## Data scraper

Deployed to get raw data at a 10 min interval by:
* using the `fetch_data.py` file,
* with a CRON which reads essentially:
```
*/10 * * * * cd ~/predi-veli && python3 src/fetch_data.py >>  ~/fetch_data.log
4 4 * * * cd ~/predi-veli && python3 -m src.daily_update >>  ~/daily_update.log
```
NB: when using virtual envs (*e.g.* the one specified by the `requirements.txt` file), 
`python3` actually stands for a longer expression!

## Slack messages - Dotenv

Tokens for Slack should be saved in a `.env` file included in `predi-veli` 
and commands should be run from this root folder. Expected format is:
```
# Slack Token
SLACK_API_TOKEN="xoxb-example-this-will-not-work"

# Output channel on Slack
CHANNEL_ID="C0-ANOTHER-EXAMPLE"

PREDIVELI_PATH="path-to-predi-veli-folder"
```

## Running ML training

A new virtual environnement was created to this end: `predi-veli-ml-venv`.

To activate it:
`conda activate predi-veli-ml-venv`

To run auto-sklearn (on Windows), we need to use Linux, either through wsl (from cmd, possibly with elevated rights) or through a virtual machine.

NB: the `requirements.txt` file in the repo corresponds to the venv for the scraper, not to the one required for the ML virtual environnement.
